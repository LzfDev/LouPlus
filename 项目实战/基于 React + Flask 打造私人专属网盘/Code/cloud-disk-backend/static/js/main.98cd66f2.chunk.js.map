{"version":3,"sources":["Logic/Api.js","Component/LoginForm.js","Component/MainPanel.js","App.js","serviceWorker.js","index.js"],"names":["Api","BASE_API","login","email","password","fetch","this","method","body","JSON","stringify","headers","auth","token","getFolders","addFolder","name","getFolder","deleteFolder","uploadFile","folder","file","data","FormData","append","Accept","deleteFile","filename","generateFileDownloadUrl","generateShareFileDownloadUrl","url","updateFileShareType","shareType","getFileInfoWithShareUrl","LoginForm","props","state","error","handleSubmit","bind","e","preventDefault","then","response","ok","json","setState","onLogin","alert","bsStyle","md","mdOffset","id","onSubmit","type","placeholder","onChange","evt","target","value","Component","MainPanel","folders","showAddFolderDialog","addFolderError","files","showUploadFileDialog","uploadFileError","selectedFolder","selectedFile","showFileShareDialog","saveFileShareType","responseJson","firstFolder","refreshFileList","find","x","newFolderName","refreshFolderList","folderName","swal","title","text","icon","buttons","dangerMode","willDelete","newUploadFile","publicShareRadioRef","checked","privateShareRadioRef","addFolderAlert","folderList","map","role","key","onClick","changeSelectedFolder","className","glyph","uploadFileAlert","filesList","href","generateDownloadUrl","show","onHide","Header","Title","Body","Footer","window","location","public_share_url","size","bgColor","fgColor","level","private_share_url","private_share_password","inline","defaultChecked","open_public_share","inputRef","ref","open_private_share","noShareRadioRef","MainPage","Cookies","get","set","expires","SharePage","path","match","params","content","element","attributes","button","closeModal","closeOnEsc","closeOnClickOutside","close","style","App","Brand","Route","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.98cd66f2.chunk.js","sourcesContent":["const Api = {\n    BASE_API: 'http://localhost:5000',\n\n    login(email, password){\n        return fetch(this.BASE_API + \"/login\",{\n            method: 'POST',\n            body: JSON.stringify({email: email, password: password}),\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        });\n    },\n\n    auth(token){\n        return fetch(this.BASE_API + \"/auth\", {\n            method: 'GET',\n            headers: {\n                'Authorization': token,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        });\n    },\n\n    getFolders(){\n        return fetch(this.BASE_API + \"/folders\", {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n        });\n    },\n\n    addFolder(name){\n        return fetch(this.BASE_API + \"/folders\", {\n            method: 'POST',\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({name: name}),\n        });\n    },\n\n    getFolder(name){\n        return fetch(this.BASE_API + \"/folders/\" + name, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n        });\n    },\n\n    deleteFolder(name){\n        return fetch(this.BASE_API + \"/folders/\" + name, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n            },\n        });\n    },\n\n    uploadFile(folder, file){\n        var data = new FormData();\n        data.append('file', file);\n        return fetch(this.BASE_API + \"/folders/\" + folder, {\n            method: 'POST',\n            body: data,\n            headers: {\n                Accept: 'application/json',\n            },\n        });\n    },\n\n    deleteFile(folder, filename){\n        return fetch(this.BASE_API + \"/folders/\" + folder + \"/\" + filename, {\n            method: 'DELETE',\n            headers:{\n                'Accept': 'application/json',\n            },\n        });\n    },\n\n    generateFileDownloadUrl(folder, filename){\n        return this.BASE_API + \"/folders/\" + folder + \"/\" + filename;\n    },\n\n    generateShareFileDownloadUrl(url){\n        return this.BASE_API + \"/share/\" + url + \"?download=true\";\n    },\n\n    updateFileShareType(folder, filename, shareType){\n        return fetch(this.BASE_API + \"/folders/\" + folder + \"/\" + filename + \"?shareType=\" + shareType, {\n            method: 'PATCH',\n            headers: {\n                'Accept': 'application/json',\n            },\n        });\n    },\n\n    getFileInfoWithShareUrl(url, password){\n        return fetch(this.BASE_API + \"/share/\" + url + \"?password=\" + password,{\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n            },\n        });\n    },\n\n}\n\nexport default Api;\n","import React, {Component} from 'react';\n\nimport Alert from 'react-bootstrap/lib/Alert';\nimport Api from '../Logic/Api';\n\nimport Col from 'react-bootstrap/lib/Col';\nimport FormGroup from 'react-bootstrap/lib/FormGroup';\nimport FormControl from 'react-bootstrap/lib/FormControl';\n\nimport './LoginForm.css';\n\nclass LoginForm extends Component{\n    constructor(props){\n        super(props);\n\n        // 登录错误的状态\n        this.state = {\n            error: false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleSubmit(e){\n        e.preventDefault();\n        const email = this.email;\n        const password = this.password;\n\n        Api.login(email, password)\n            .then(response =>{\n                if (!response.ok){\n                    this.setState({ error: true });\n                    return ;\n                }\n                // 登录成功，读取响应\n                response.json()\n                    .then(data => {\n                        this.setState({ error: false });\n                        this.props.onLogin(data);\n                    })\n            })\n    }\n\n    render(){\n        var alert;\n        if (this.state.error){\n            alert = (\n                    <Alert bsStyle='danger'>\n                        <strong>Error:</strong>Wrong email or password.\n                    </Alert>\n                    );\n        } else {\n            alert = (\n                    <span></span>\n                    );\n        }\n\n        return (\n                <Col md={4} mdOffset={4}>\n\n                    <h3>Login</h3>\n                    {alert}\n                    <form id=\"loginForm\" onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <FormControl type=\"text\" placeholder=\"Email\" onChange={evt => this.email = evt.target.value} />\n                    </FormGroup>\n                    <FormGroup>\n                        <FormControl type=\"password\" placeholder=\"Password\" onChange={evt => this.password = evt.target.value} />\n                    </FormGroup>\n                    <FormGroup>\n                        <FormControl id=\"submitButton\" type=\"submit\" value=\"Login\" />\n                    </FormGroup>\n                    </form>\n                </Col>\n                );\n    }\n}\n\nexport default LoginForm;\n","import React, { Component } from 'react';\nimport Col from 'react-bootstrap/lib/Col';\nimport Row from 'react-bootstrap/lib/Row';\n\n// 引入若干新组件\nimport ListGroup from 'react-bootstrap/lib/ListGroup';\nimport ListGroupItem from 'react-bootstrap/lib/ListGroupItem';\nimport Glyphicon from 'react-bootstrap/lib/Glyphicon';\nimport Modal from 'react-bootstrap/lib/Modal';\nimport Button from 'react-bootstrap/lib/Button';\nimport FormControl from 'react-bootstrap/lib/FormControl';\nimport Alert from 'react-bootstrap/lib/Alert';\nimport Radio from 'react-bootstrap/lib/Radio';\nimport FormGroup from 'react-bootstrap/lib/FormGroup';\nimport swal from 'sweetalert';\nimport QRCode from 'qrcode.react';\n\nimport './MainPanel.css';\n\nimport Api from '../Logic/Api';\n\nclass MainPanel extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            folders: [],\n            showAddFolderDialog: false,\n            addFolderError: false,\n\n            // 用于文件列表的状态\n            files:[],\n            showUploadFileDialog: false,\n            uploadFileError: false,\n\n            // 当前选择的文件夹\n            selectedFolder: '',\n\n            // 分享\n            selectedFile: '',\n            showFileShareDialog:false,\n        };\n        this.addFolder = this.addFolder.bind(this);\n        this.uploadFile = this.uploadFile.bind(this);\n        this.saveFileShareType = this.saveFileShareType.bind(this)\n    }\n\n    refreshFolderList(){\n        Api.getFolders()\n            .then(response => {\n                if (response.ok){\n                    response.json()\n                        .then(responseJson => {\n                            // 默认选择第一个文件夹\n                            const firstFolder = responseJson.data[0];\n\n                            // 在setState回调中刷新文件列表\n                            this.setState({\n                                folders: responseJson.data,\n                                selectedFolder: firstFolder,\n                            }, () => {\n                                this.refreshFileList();\n                            });\n                        })\n                }\n            });\n    }\n\n    refreshFileList(){\n        // 无任何文件夹，直接返回\n        if (!this.state.selectedFolder){\n            return;\n        }\n        Api.getFolder(this.state.selectedFolder.name)\n            .then(response => {\n                if (response.ok){\n                    response.json()\n                        .then(responseJson => {\n                            this.setState({\n                                files: responseJson.data.files,\n                            });\n                        })\n                }\n            })\n    }\n\n    changeSelectedFolder(id){\n        // 当前选择的文件夹id不变，不做任何事情\n        if (this.state.selectedFolder.id == id){\n            return;\n        }\n\n        // 根据id找到文件夹名字，刷新右侧的文件夹列表\n        this.setState({\n            selectedFolder: this.state.folders.find(x => x.id == id)\n        }, () => {\n            this.refreshFileList();\n        });\n    }\n\n    addFolder(){\n        // 调用API 新建文件夹\n        Api.addFolder(this.newFolderName)\n            .then(response => {\n                this.setState({\n                    addFolderError: !response.ok,\n                });\n\n                // 添加成功，刷新文件夹列表\n                if (response.ok){\n                    this.setState({\n                        showAddFolderDialog: false\n                    });\n                    this.refreshFolderList();\n                }\n            });\n    }\n\n    deleteFolder(folderName) {\n        swal({\n            title: \"Are you sure?\",\n            text: \"You will not be able to recover this folder!\",\n            icon: \"Warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n        .then((willDelete) => {\n            if(willDelete){\n            // 调用 API 删除文件夹\n            Api.deleteFolder(folderName)\n                .then(response => {\n                    if (response.ok) {\n                        swal(\"Your folder has been deleted.\", {\n                            icon: \"success\",\n                        });\n                        // 删除成功，刷新列表\n                        this.refreshFolderList();\n                    }\n                });\n            }\n        });\n    }\n\n    uploadFile(){\n        Api.uploadFile(this.state.selectedFolder.name, this.newUploadFile).then(response => {\n        this.setState({\n            uploadFileError: !response.ok,\n        });\n\n        if (response.ok){\n            this.setState({\n                showUploadFileDialog: false\n            });\n            this.refreshFileList();\n        }\n        })\n    }\n\n    deleteFile(filename){\n        swal({\n            title: \"Are you sure?\",\n            text: \"You will not be able to recover this file!\",\n            icon:\"Warning\",\n            buttons:true,\n            dangerMode: true,\n        })\n        .then((willDelete) => {\n            if (willDelete){\n                Api.deleteFile(this.state.selectedFolder.name, filename).then(response => {\n                if (response.ok){\n                    swal(\"Your file has been deleted.\", {icon: \"success\",});\n                    this.refreshFileList();\n                }\n                });\n            }\n        })\n    }\n\n    generateDownloadUrl(filename){\n        return Api.generateFileDownloadUrl(this.state.selectedFolder.name, filename);\n    }\n\n    // 保存文件的分享状态\n    saveFileShareType(){\n        var shareType;\n        if(this.publicShareRadioRef.checked){\n            shareType = \"public\";\n        } else if (this.privateShareRadioRef.checked){\n            shareType = \"private\";\n        } else {\n            shareType = \"none\";\n        }\n\n        Api.updateFileShareType(this.state.selectedFolder.name, this.state.selectedFile.filename, shareType)\n            .then(response =>{\n                if(response.ok){\n                    this.setState({\n                        showFileShareDialog:false,\n                    });\n                    this.refreshFileList();\n                }\n            });\n    }\n\n    componentDidMount(){\n        this.refreshFolderList();\n    }\n\n    render(){\n        const folderList = this.state.folders.map(folder => {\n                return (\n                        <ListGroupItem role=\"menu\" key={folder.id}>\n                            <a onClick={() => this.changeSelectedFolder(folder.id)}>\n                            <Glyphicon className=\"folderIcon\" glyph='folder-close' />\n                            <span className=\"folderName\">{folder.name}</span>\n                            </a>\n                            <a onClick={() => {this.deleteFolder(folder.name)}}>\n                            <Glyphicon className=\"removeFolderIcon\" glyph='remove' />\n                            </a>\n                        </ListGroupItem>\n                        )\n        });\n\n        // 添加文件夹失败，显示alert\n        var addFolderAlert;\n        if (this.state.addFolderError) {\n            addFolderAlert = (\n                    <Alert bsStyle='danger'>\n                        <strong>Error: </strong>Please check your folder name and again.\n                    </Alert>\n                    );\n        } else {\n            addFolderAlert = <span></span>;\n        }\n\n        // 文件列表\n        const filesList = this.state.files.map(file => {\n            return (\n                    <ListGroupItem key={file.id}>\n                        <Glyphicon className=\"fileIcon\" glyph='file' />\n                        <span className=\"fileName\">{file.filename}</span>\n                        <a onClick={()=>this.deleteFile(file.filename)}>\n                        <Glyphicon className=\"removeFileIcon\" glyph='remove' />\n                        </a>\n                        <a href={this.generateDownloadUrl(file.filename)}>\n                        <Glyphicon className=\"downloadFileIcon\" glyph='download-alt' />\n                        </a>\n                        <a onClick={()=>this.setState({selectedFile:file, showFileShareDialog: true})}>\n                        <Glyphicon className=\"shareFileIcon\" glyph='share' />\n                        </a>\n                    </ListGroupItem>\n                    );\n        });\n\n        // 上传文件错误提示\n        var uploadFileAlert;\n        if(this.state.uploadFileError){\n            uploadFileAlert = (\n                    <Alert bsStyle='danger'>\n                    <strong>Error: </strong>Please check your file name again.\n                    </Alert>\n                    );\n        } else {\n            uploadFileAlert = <span></span>;\n        }\n\n        return (\n                <Row>\n                <Col md={4}>\n                    <Button id=\"addFolderButton\" onClick={() => this.setState({showAddFolderDialog:true})} bsStyle='primary'>New Folder</Button>\n                    <p></p>\n                    <ListGroup>\n                        {folderList}\n                    </ListGroup>\n\n                    <Modal show={this.state.showAddFolderDialog} onHide={() => this.setState({showAddFolderDialog:false})}>\n                        <Modal.Header>\n                            <Modal.Title>Add folder</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            {addFolderAlert}\n                            <FormControl type=\"text\" placeholder=\"Folder Name\" onChange={evt => this.newFolderName = evt.target.value} />\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button onClick={() => this.setState({showAddFolderDialog:false})}>Close</Button>\n                            <Button onClick={this.addFolder} bsStyle=\"primary\">Add</Button>\n                        </Modal.Footer>\n                    </Modal>\n                </Col>\n                <Col md={8}>\n                    <Button id=\"uploadFileButton\" onClick={()=>this.setState({showUploadFileDialog:true})} bsStyle='primary'>Upload File</Button>\n                    <p></p>\n                    <ListGroup>\n                        {filesList}\n                    </ListGroup>\n\n                    <Modal show={this.state.showUploadFileDialog} onHide={()=>this.setState({showUploadFileDialog:false})}>\n                        <Modal.Header>\n                            <Modal.Title>Upload File</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            {uploadFileAlert}\n                            <FormControl type=\"file\" placeholder=\"Upload file\" onChange={evt => this.newUploadFile= evt.target.files[0]} />\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button onClick={()=>this.setState({showUploadFileDialog:false})}> Close</Button>\n                            <Button onClick={this.uploadFile} bsStyle=\"primary\">Add</Button>\n                        </Modal.Footer>\n                    </Modal>\n                    \n                    // 分享设置页面\n                    <Modal show={this.state.showFileShareDialog} onHide={()=>this.setState({showFileShareDialog: false})}>\n                        <Modal.Header>\n                            <Modal.Title>Share</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <ListGroup>\n                                <ListGroupItem>\n                                    <Row>\n                                        <Col md={8}>\n                                            <p>Public Share: {window.location + \"s/\" + this.state.selectedFile.public_share_url}\n                                            </p>\n                                        </Col>\n                                        <Col md={2} mdOffset={2}>\n                                            <QRCode value={window.location + \"s/\" + this.state.selectedFile.public_share_url}\n                                            size={64}\n                                            bgColor={'#ffffff'}\n                                            fgColor={'#000000'}\n                                            level={'L'} />\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={8}>\n                                            <p>Private Share: {window.location + \"s/\" + this.state.selectedFile.private_share_url}, Password: {this.state.selectedFile.private_share_password}\n                                            </p>\n                                        </Col>\n                                        <Col md={2} mdOffset={2}>\n                                            <QRCode value={window.location + \"s/\" + this.state.selectedFile.private_share_url}\n                                            size={64}\n                                            bgColor={'#ffffff'}\n                                            fgColor={'#000000'}\n                                            level={'L'} />\n                                        </Col>\n                                    </Row>\n                                </ListGroupItem>\n                                <ListGroupItem>\n                                    <FormGroup>\n                                        <Radio name=\"shareGroup\"\n                                        inline\n                                        defaultChecked={this.state.selectedFile.open_public_share}\n                                        inputRef={ref=>{this.publicShareRadioRef = ref;}}>Public\n                                        </Radio>{' '}\n                                        <Radio name=\"shareGroup\"\n                                        inline\n                                        defaultChecked={this.state.selectedFile.open_private_share}\n                                        inputRef={ref=>{this.privateShareRadioRef = ref;}}>Private\n                                        </Radio>{' '}\n                                        <Radio name=\"shareGroup\"\n                                        inline\n                                        defaultChecked={!this.state.selectedFile.open_public_share && !this.state.selectedFile.open_private_share}\n                                        inputRef={ref=>{this.noShareRadioRef = ref;}}>\n                                        None\n                                        </Radio>\n                                    </FormGroup>\n                                </ListGroupItem>\n                            </ListGroup>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button onClick={()=>this.setState({showFileShareDialog: false})}>Close</Button>\n                            <Button onClick={this.saveFileShareType} bsStyle=\"primary\">Save</Button>\n                        </Modal.Footer>\n                    </Modal>\n                </Col>\n                </Row>\n            );\n    }\n}\n\nexport default MainPanel;\n\n","import React, { Component } from 'react';\nimport Cookies from 'js-cookie';\nimport Navbar from 'react-bootstrap/lib/Navbar';\nimport Row from 'react-bootstrap/lib/Row';\nimport Grid from 'react-bootstrap/lib/Grid';\nimport Glyphicon from 'react-bootstrap/lib/Glyphicon';\nimport Col from 'react-bootstrap/lib/Col';\nimport Button from 'react-bootstrap/lib/Button';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport './App.css';\nimport Api from './Logic/Api';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport swal from 'sweetalert';\n\n//引入新增的组件\nimport LoginForm from './Component/LoginForm';\nimport MainPanel from './Component/MainPanel';\n\n\nclass MainPage extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            login: false\n        };\n\n        this.onLogin = this.onLogin.bind(this);\n\n    }\n\n    componentDidMount(){\n        var token = Cookies.get('token');\n        if(token){\n            // 验证token\n            Api.auth(token)\n                .then(response => {\n                    if (response.ok){\n                        this.setState({\n                            login: true\n                        });\n                    }\n                })\n        }\n    }\n\n    onLogin(data){\n        Cookies.set('token', data.token, { expires: 7 });\n        this.setState({\n            login: true\n        });\n    }\n\n    render(){\n        var content;\n        if (this.state.login){\n            content = <MainPanel title=\"主页面\"/>;\n        } else {\n            content = <LoginForm onLogin={this.onLogin} />;\n        }\n        return content;\n    }\n}\n\n\n// 文件分享查看页面\nclass SharePage extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            file: null\n        };\n    }\n\n    componentDidMount(){\n        // 从路径参数中拿到path\n        const path = this.props.match.params.path;\n        Api.getFileInfoWithShareUrl(path)\n        .then(response => {\n            if(response.ok){\n                response.json()\n                    .then(responseJson =>{\n                        this.setState({\n                            file: responseJson.data\n                        });\n\n                        // 设置Cookie用于下载认证\n                        var token = Cookies.get('token');\n                        if (token){\n                            return;\n                            \n                        } else if (responseJson.data.open_private_share){\n                            swal({\n                                text: 'Please type the password',\n                                content: {\n                                    element: \"input\",\n                                    attributes:{\n                                        placeholder:\"Type your password\",\n                                        type: \"password\",\n                                    },\n                                },\n                                button: {\n                                    text: \"Go\",\n                                    closeModal: false,\n                                    closeOnEsc: false,\n                                },\n                                closeOnClickOutside: false,\n                            })\n                            .then(password => {\n                                Api.getFileInfoWithShareUrl(path, password)\n                                .then(response => {\n                                    response.json()\n                                    .then(responseJson => {\n                                        // 密码正确，设置Token\n                                        if(responseJson.data.token){\n                                            Cookies.set('token', responseJson.data.token, { expires: 1});\n                                            swal.close();\n                                        } else {\n                                            swal(\"Wrong password\");\n                                        }\n                                    });\n                                })\n                            })\n                        }\n                        \n                        if (responseJson.data.token){\n                            Cookies.set('token', responseJson.data.token, { expires: 1});\n                        }\n                    })\n            }\n        })\n    }\n\n    \n    render(){\n        if (!this.state.file){\n            return (\n                    <Col md={4} mdOffset={4}>\n                        <span> The file you are requesting does not exists!</span>\n                    </Col>\n\n                    );\n        }\n        return (\n                <Row>\n                    <Col md={1} mdOffset={4}>\n                        <Glyphicon glyph='file' style={{ 'fontSize': '90px'}}/>\n                    </Col>\n                    <Col md={4}>\n                    <p>{this.state.file.filename}</p>\n                    <Button style={{ 'marginTop': '25px' }} href={Api.generateShareFileDownloadUrl(this.props.match.params.path)}><Glyphicon glyph='save-file' />Download</Button>\n                    </Col>\n                </Row>\n                );\n    }\n}\n\n// 路由\nconst App = () =>(\n        <Router>\n            <Grid>\n                <Row>\n                    <Navbar>\n                        <Navbar.Header>\n                            <Navbar.Brand>\n                                <a href=\"/\">CloudDisk</a>\n                            </Navbar.Brand>\n                        </Navbar.Header>\n                    </Navbar>\n                    <Route path=\"/\" exact component={MainPage} />\n                    <Route path=\"/s/:path\" component={SharePage} />\n                </Row>\n            </Grid>\n        </Router>\n        );\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}